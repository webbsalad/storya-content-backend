// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/content/content_service.proto

package content

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ItemID with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ItemID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ItemID with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ItemIDMultiError, or nil if none found.
func (m *ItemID) ValidateAll() error {
	return m.validate(true)
}

func (m *ItemID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ItemId

	if len(errors) > 0 {
		return ItemIDMultiError(errors)
	}

	return nil
}

// ItemIDMultiError is an error wrapping multiple validation errors returned by
// ItemID.ValidateAll() if the designated constraints aren't met.
type ItemIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ItemIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ItemIDMultiError) AllErrors() []error { return m }

// ItemIDValidationError is the validation error returned by ItemID.Validate if
// the designated constraints aren't met.
type ItemIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ItemIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ItemIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ItemIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ItemIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ItemIDValidationError) ErrorName() string { return "ItemIDValidationError" }

// Error satisfies the builtin error interface
func (e ItemIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sItemID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ItemIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ItemIDValidationError{}

// Validate checks the field values on CreateItemRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateItemRequestMultiError, or nil if none found.
func (m *CreateItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for Year

	// no validation rules for Type

	if len(errors) > 0 {
		return CreateItemRequestMultiError(errors)
	}

	return nil
}

// CreateItemRequestMultiError is an error wrapping multiple validation errors
// returned by CreateItemRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateItemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateItemRequestMultiError) AllErrors() []error { return m }

// CreateItemRequestValidationError is the validation error returned by
// CreateItemRequest.Validate if the designated constraints aren't met.
type CreateItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateItemRequestValidationError) ErrorName() string {
	return "CreateItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateItemRequestValidationError{}

// Validate checks the field values on UpdateItemRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateItemRequestMultiError, or nil if none found.
func (m *UpdateItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ItemId

	// no validation rules for Title

	// no validation rules for Year

	// no validation rules for Type

	if len(errors) > 0 {
		return UpdateItemRequestMultiError(errors)
	}

	return nil
}

// UpdateItemRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateItemRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateItemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateItemRequestMultiError) AllErrors() []error { return m }

// UpdateItemRequestValidationError is the validation error returned by
// UpdateItemRequest.Validate if the designated constraints aren't met.
type UpdateItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateItemRequestValidationError) ErrorName() string {
	return "UpdateItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateItemRequestValidationError{}
